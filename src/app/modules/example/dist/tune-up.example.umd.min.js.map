{"version":3,"file":"tune-up.example.umd.min.js","sources":["../src/config/validations.js","../src/config/validators.js","../src/config/config.js","../src/example.component.js","../src/example.routing.js","../src/example.module.js"],"sourcesContent":["/**\n * Those are the validations for the entities of the module.\n * If there are many maybe write them in different files and merge them.\n */\n\n// main object\nexport const validations = {\n  // entity\n  foo: {\n    // field, array of validations\n    email: [\n      // every validation is an object\n      {\n        // rule, it is the name of a function (custom or form validator.js)\n        isEmail: {\n          // message if incorrect\n          message: 'Must be a valid email'\n        }\n      },\n      {\n        contains: {\n          message: 'Must contain .es',\n          // hardcoded arguments\n          arguments: ['.es']\n        }\n      },\n      {\n        // custom validation function, we dont need arguments\n        startsWithHello: {\n          message: 'Email must start with \"hello\"'\n        }\n      }\n      // maybe better:\n      /**\n       {\n         startsWith: {\n           message: 'Email must start with \"hello\"',\n           arguments: ['hello']\n         }\n       }\n       */\n    ],\n    // another field\n    password: [\n      {\n        passwordDifferentFromEmail: {\n          message: 'Password must be different from email',\n          arguments: [['email']] // argument inside an array means: take it from the model\n          // it takes the one whose name in the form matches this.\n        }\n      }\n    ]\n  }\n};\n","/**\n * Custom validatos or validation functions, they are\n * always objects that contain one or more function\n * that return true or false.\n */\nexport const validators = {\n  startsWithHello: function(value) {\n    return value.indexOf('hello') === 0;\n  },\n  passwordDifferentFromEmail: function(value, email) {\n    return value !== email;\n  }\n};\n","import {configService} from '@tune-up/core';\nimport {validations} from './validations';\nimport {validators} from './validators';\n\n// add what you need to the configService\nconfigService.addValidations(validations);\nconfigService.addValidators(validators);\n","/**\n * Always import html and css this way.\n * Always use the prefix tn in the selector.\n * Always initialize the models in the constructor\n *  (ngModel can't do it with nested model)\n * and always initialize them to undefined (not null)\n * Everytime you need to use a method from the html declare\n * it as an arrow function.\n */\nimport {Component, ViewChild} from '@angular/core';\nimport html from './example.component.html';\nimport './example.component.css';\n\n@Component({\n  selector: 'tn-example',\n  template: html\n})\nexport class ExampleComponent {\n  @ViewChild('frm') form;\n  constructor() {\n    this.foo = {\n      email: undefined,\n      password: undefined\n    };\n  }\n  onSubmit = () => {\n    console.log(this);\n  };\n}\n","/**\n * Every module has its own routes, at least the default one,\n * path: '', which loads the main component of the module\n */\nimport {RouterModule} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {ExampleComponent} from './example.component';\n\n@NgModule({\n  imports: [RouterModule.forChild([{path: '', component: ExampleComponent}])],\n  exports: [RouterModule]\n})\nexport class ExampleRoutingModule {}\n","/**\n * This is the module, TuneUpCoreModule has all the imports\n * you may need, if not open an issue but dont include it here\n * so it is available to other modules.\n * Import TuneUpCore and the RoutingModule and declare \n * the providers and declarations you may need.\n * \n * If using a PrimeNg module gives you and error, register\n * it in lib/core/src/packages/primeng so it is shared among\n * all the app.\n */\nimport {NgModule} from '@angular/core';\nimport {ExampleRoutingModule} from './example.routing';\nimport {ExampleComponent} from './example.component';\nimport {TuneUpCoreModule} from '@tune-up/core';\n\n@NgModule({\n  imports: [TuneUpCoreModule, ExampleRoutingModule],\n  declarations: [ExampleComponent]\n})\nexport class ExampleModule {}\n"],"names":["validations","validators","value","indexOf","email","configService","addValidations","addValidators","ExampleComponent","Component","ViewChild","onSubmit","log","foo","undefined","form","ExampleRoutingModule","NgModule","RouterModule","forChild","path","component","ExampleModule","TuneUpCoreModule"],"mappings":"slBAMA,IAAaA,iCAUM,6CAKA,8BAEG,mCAMH,kFAiBA,oDACI,eC1CVC,mBACM,yBAASC,UACU,IAA3BA,EAAMC,QAAQ,qCAEK,oCAASD,EAAOE,UACnCF,IAAUE,ICLrBC,gBAAcC,eAAeN,GAC7BK,gBAAcE,cAAcN,igDCWfO,KAJZC,sBACW,83CAITC,YAAU,YACX,yGAMAC,SAAW,mBACDC,aANHC,gBACIC,gBACGA,0hBAJIC,kBCNPC,KAJZC,qBACWC,eAAaC,WAAWC,KAAM,GAAIC,UAAWb,eAC7CU,uFCUCI,KAJZL,qBACWM,mBAAkBP,iBACbR"}