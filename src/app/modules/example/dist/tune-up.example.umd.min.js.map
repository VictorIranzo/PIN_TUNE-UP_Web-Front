{"version":3,"file":"tune-up.example.umd.min.js","sources":["../src/config/validations.js","../src/config/validators.js","../src/config/config.js","../src/example.component.js","../src/example.routing.js","../src/example.module.js"],"sourcesContent":["/**\r\n * Those are the validations for the entities of the module.\r\n * If there are many maybe write them in different files and merge them.\r\n */\r\n\r\n// main object\r\nexport const validations = {\r\n  // entity\r\n  foo: {\r\n    // field, array of validations\r\n    email: [\r\n      // every validation is an object\r\n      {\r\n        // rule, it is the name of a function (custom or form validator.js)\r\n        isEmail: {\r\n          // message if incorrect\r\n          message: 'Must be a valid email'\r\n        }\r\n      },\r\n      {\r\n        contains: {\r\n          message: 'Must contain .es',\r\n          // hardcoded arguments\r\n          arguments: ['.es']\r\n        }\r\n      },\r\n      {\r\n        // custom validation function, we dont need arguments\r\n        startsWithHello: {\r\n          message: 'Email must start with \"hello\"'\r\n        }\r\n      }\r\n      // maybe better:\r\n      /**\r\n       {\r\n         startsWith: {\r\n           message: 'Email must start with \"hello\"',\r\n           arguments: ['hello']\r\n         }\r\n       }\r\n       */\r\n    ],\r\n    // another field\r\n    password: [\r\n      {\r\n        passwordDifferentFromEmail: {\r\n          message: 'Password must be different from email',\r\n          arguments: [['email']] // argument inside an array means: take it from the model\r\n          // it takes the one whose name in the form matches this.\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n","/**\r\n * Custom validatos or validation functions, they are\r\n * always objects that contain one or more function\r\n * that return true or false.\r\n */\r\nexport const validators = {\r\n  startsWithHello: function(value) {\r\n    return value.indexOf('hello') === 0;\r\n  },\r\n  passwordDifferentFromEmail: function(value, email) {\r\n    return value !== email;\r\n  }\r\n};\r\n","import {configService} from '@tune-up/core';\r\nimport {validations} from './validations';\r\nimport {validators} from './validators';\r\n\r\n// add what you need to the configService\r\nconfigService.addValidations(validations);\r\nconfigService.addValidators(validators);\r\n","/**\r\n * Always import html and css this way.\r\n * Always use the prefix tn in the selector.\r\n * Always initialize the models in the constructor\r\n *  (ngModel can't do it with nested model)\r\n * and always initialize them to undefined (not null)\r\n * Everytime you need to use a method from the html declare\r\n * it as an arrow function.\r\n */\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport html from './example.component.html';\r\nimport './example.component.css';\r\n\r\n@Component({\r\n  selector: 'tn-example',\r\n  template: html\r\n})\r\nexport class ExampleComponent {\r\n  @ViewChild('frm') form;\r\n  constructor() {\r\n    this.foo = {\r\n      email: undefined,\r\n      password: undefined\r\n    };\r\n  }\r\n  onSubmit = () => {\r\n    console.log(this);\r\n  };\r\n}\r\n","/**\r\n * Every module has its own routes, at least the default one,\r\n * path: '', which loads the main component of the module\r\n */\r\nimport {RouterModule} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {ExampleComponent} from './example.component';\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild([{path: '', component: ExampleComponent}])],\r\n  exports: [RouterModule]\r\n})\r\nexport class ExampleRoutingModule {}\r\n","/**\r\n * This is the module, TuneUpCoreModule has all the imports\r\n * you may need, if not open an issue but dont include it here\r\n * so it is available to other modules.\r\n * Import TuneUpCore and the RoutingModule and declare \r\n * the providers and declarations you may need.\r\n * \r\n * If using a PrimeNg module gives you and error, register\r\n * it in lib/core/src/packages/primeng so it is shared among\r\n * all the app.\r\n */\r\nimport {NgModule} from '@angular/core';\r\nimport {ExampleRoutingModule} from './example.routing';\r\nimport {ExampleComponent} from './example.component';\r\nimport {TuneUpCoreModule} from '@tune-up/core';\r\n\r\n@NgModule({\r\n  imports: [TuneUpCoreModule, ExampleRoutingModule],\r\n  declarations: [ExampleComponent]\r\n})\r\nexport class ExampleModule {}\r\n"],"names":["validations","validators","value","indexOf","email","configService","addValidations","addValidators","ExampleComponent","Component","ViewChild","onSubmit","log","foo","undefined","form","ExampleRoutingModule","NgModule","RouterModule","forChild","path","component","ExampleModule","TuneUpCoreModule"],"mappings":"slBAMA,IAAaA,iCAUM,6CAKA,8BAEG,mCAMH,kFAiBA,oDACI,eC1CVC,mBACM,yBAASC,UACU,IAA3BA,EAAMC,QAAQ,qCAEK,oCAASD,EAAOE,UACnCF,IAAUE,ICLrBC,gBAAcC,eAAeN,GAC7BK,gBAAcE,cAAcN,igDCWfO,KAJZC,sBACW,o5CAITC,YAAU,YACX,yGAMAC,SAAW,mBACDC,aANHC,gBACIC,gBACGA,0hBAJIC,kBCNPC,KAJZC,qBACWC,eAAaC,WAAWC,KAAM,GAAIC,UAAWb,eAC7CU,uFCUCI,KAJZL,qBACWM,mBAAkBP,iBACbR"}