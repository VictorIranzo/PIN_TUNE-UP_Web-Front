{"version":3,"file":"tune-up.home.umd.js","sources":["../src/services/filter.service.js","../src/components/utlist/services/utlist.service.js","../src/components/utlist/services/agentpic.service.js","../src/home.component.js","../src/home.routing.js","../src/components/kanbanresume/services/kanbanactivities.service.js","../src/components/kanbanresume/kanbanresume.component.js","../src/components/utlist/utlist.component.js","../src/components/utfilter/services/getProductos.service.js","../src/components/utfilter/services/getProyectos.service.js","../src/components/utfilter/services/getSprintsProducto.service.js","../src/components/utfilter/services/getColaboradores.service.js","../src/components/utfilter/utfilter.component.js","../src/home.module.js"],"sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable()\nexport class FilterService {\n  filter(uts, filtro) {\n    let filteredUts = uts.filter(\n      (ut) => {\n        let isActivity = filtro.IdActividad === 'ALL'|| ut.IdActividad === filtro.IdActividad;\n        let isAgente = filtro.IdAgente === 'ALL' || ut.IdAgente === filtro.IdAgente;\n        let isProducto = filtro.IdProducto === 'ALL' || ut.IdProducto === filtro.IdProducto;\n        let isVersion = filtro.IdVersion === 'ALL' || ut.IdVersion === filtro.IdVersion;\n        let isProyecto = filtro.IdProyecto === 'ALL' || ut.IdProyecto === filtro.IdProyecto;\n        return isActivity && isAgente && isProducto && isVersion && isProyecto;\n      }\n    );\n    return filteredUts;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n// TODO: move to home\n@Injectable()\nexport class UtListService {\n  constructor(http: HttpClient) {\n    this._http = http;\n    this._url = 'SeguimientosKanban';\n  }\n  get(\n    idActividad = 'ALL',\n    idAgente = 'ALL',\n    idProducto = 'ALL',\n    idVersion = 'ALL',\n    idProyecto = 'ALL'\n  ) {\n    return this._http.get(\n      `${this._url}?idActividad=${idActividad}&idAgente=${idAgente}&idProducto=${idProducto}&idVersion=${idVersion}&idProyecto=${idProyecto}`\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class AgentPicService {\n  constructor(http: HttpClient) {\n    this._http = http;\n    this._url = 'Agentes/Imagen';\n  }\n  get(idAgente, idSitio) {\n    return this._http.get(`${this._url}/${idAgente}/${idSitio}`, {\n      responseType: 'blob',\n    });\n  }\n}\n","import {Component} from '@angular/core';\nimport {FilterService} from './services';\nimport {UtListService} from './components/utlist/services';\nimport {NotificationsService} from '@tune-up/core';\nimport html from './home.component.html';\nimport './home.component.css';\n\n@Component({\n  selector: 'tn-home',\n  template: html,\n  providers: [\n    UtListService,\n    FilterService,\n  ],\n})\nexport class HomeComponent {\n  allUts = [];\n  utsToShow = [];\n  globalFilter = {\n      IdAgente: 'ALL',\n      IdProducto: 'ALL',\n      IdVersion: 'ALL',\n      IdProyecto: 'ALL',\n      IdActividad: 'ALL',\n  }\n  constructor(\n    filterService: FilterService,\n    utListService: UtListService,\n    notificationService: NotificationsService\n  ) {\n    this._filterService = filterService;\n    this._utListService = utListService;\n    this._notificationsService = notificationService;\n    this._getUts();\n  }\n  _getUts() {\n    this._getUtsSubscription = this._utListService.get().subscribe(\n      (data) => {\n        this.allUts = data;\n        this.utsToShow = data;\n      },\n      (error) =>\n        this._notificationsService.error(\n          'No se pudieron obtener las UTs',\n          error\n        )\n    );\n  }\n\n  filterUts = () => {\n    this.utsToShow = this._filterService.filter(this.allUts, this.globalFilter);\n  }\n\n  ngOnDestroy() {\n    this._getUtsSubscription &&\n      !this._getUtsSubscription.closed &&\n      this._getUtsSubscription.unsubscribe();\n  }\n}\n","import {RouterModule} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {HomeComponent} from './home.component';\n\n@NgModule({\n  imports: [RouterModule.forChild([{path: '', component: HomeComponent}])],\n  exports: [RouterModule],\n})\nexport class HomeRoutingModule {}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class KanbanActivitiesService {\n  constructor(http: HttpClient) {\n    this._http = http;\n    this._url = 'ActividadesKanban2';\n  }\n  get(\n    idActividad = 'ALL',\n    idAgente = 'ALL',\n    idProducto = 'ALL',\n    idVersion = 'ALL',\n    idProyecto = 'ALL'\n  ) {\n    return this._http.get(\n      `${this._url}?idActividad=${idActividad}&idAgente=${idAgente}&idProducto=${idProducto}&idVersion=${idVersion}&idProyecto=${idProyecto}`\n    );\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {NotificationsService} from '@tune-up/core';\nimport {KanbanActivitiesService} from './services';\nimport html from './kanbanresume.component.html';\nimport './kanbanresume.component.css';\n\n@Component({\n  selector: 'tn-kanban-resume',\n  template: html,\n  providers: [KanbanActivitiesService],\n})\nexport class KanbanResumeComponent {\n  kanbanActivities = [];\n  selectedActivity = undefined;\n  @Input() filterUts;\n  @Input() filtro;\n  constructor(\n    activitiesService: KanbanActivitiesService,\n    notificationsService: NotificationsService\n  ) {\n    this._activitiesService = activitiesService;\n    this._notificationsService = notificationsService;\n    this._getKanbanActivities();\n  }\n  _getKanbanActivities() {\n    this._getActivitiesSubscription = this._activitiesService.get().subscribe(\n      (data) => {\n        this.kanbanActivities = data;\n      },\n      (error) =>\n        this._notificationsService.error(\n          'No se pudieron obtener las actividades del Kanban Resumido',\n          error\n        )\n    );\n  }\n  filterKanbanActivies(idActivity = 'ALL', status = 'ALL') {\n    if (idActivity == -1) idActivity = 'ALL';\n    this.filtro.IdActividad = idActivity;\n    this.filterUts();\n  }\n  ngOnDestroy() {\n    this._getActivitiesSubscription &&\n    !this._getActivitiesSubscription.closed &&\n    this._getActivitiesSubscription.unsubscribe();\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {NotificationsService, AgentService} from '@tune-up/core';\nimport {AgentPicService} from './services';\nimport html from './utlist.component.html';\nimport './utlist.component.css';\n\n// TODO: extract to a config file\nconst utTypesIcons = {\n  1: 'fa fa-star',\n  2: 'fa fa-bug',\n  3: 'fa fa-plus-circle',\n  4: 'fa fa-puzzle-piece',\n};\nconst workflowIcons = {\n  1: 'fa fa-arrow-up',\n  2: 'fa fa-repeat',\n  3: 'fa fa-cog',\n  4: 'fa fa-undo',\n  5: 'fa fa-refresh',\n};\nconst agentPics = {};\n\n@Component({\n  selector: 'tn-ut-list',\n  template: html,\n  providers: [AgentPicService],\n})\nexport class UtListComponent {\n  @Input() uts;\n  constructor(\n    agentPicService: AgentPicService,\n    notificationService: NotificationsService,\n    agentService: AgentService\n  ) {\n    this._agentPicService = agentPicService;\n    this._notificationsService = notificationService;\n    this._agentService = agentService;\n  }\n  getAgentPic = (ut) => {\n      const idAgente = ut.IdAgente;\n      if (idAgente) {\n        const idSitio = this._agentService.getSiteId();\n        if (!agentPics[idAgente]) {\n          this._agentPicService.get(idAgente, idSitio).subscribe((data) => {\n            agentPics[idAgente] = URL.createObjectURL(data);\n          });\n        }\n        return agentPics[idAgente] || '';\n      }\n      return '';\n  };\n  getUtTypeIcon = (ut) => {\n    return utTypesIcons[ut.IdTipoUT];\n  };\n  getStateIcon = (ut) => {\n    return workflowIcons[ut.IdTipoSeguimiento];\n  };\n  getUtLink = (ut) => {\n    return `/uts/${ut.IdUT}`;\n  };\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class GetProductosService {\n  constructor(http: HttpClient) {\n    this._http = http;\n    this._url = 'Productos2';\n  }\n  get() {\n    return this._http.get(\n      `${this._url}`\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class GetProyectosService {\n  constructor(http: HttpClient) {\n    this._http = http;\n    this._url = 'Productos';\n  }\n  get(idProducto) {\n    return this._http.get(\n      `${this._url}/${idProducto}/Proyectos`\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class GetSprintsProductoService {\n  constructor(http: HttpClient) {\n    this._http = http;\n    this._url = 'Sprints2';\n  }\n  get(idProducto) { \n    return this._http.get(`${this._url}/${idProducto}`);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class GetColaboradoresService {\n  constructor(http: HttpClient) {\n    this._http = http;\n    this._url = 'Agentes';\n  }\n  get(idAgente) {\n    return this._http.get(`${this._url}/${idAgente}/Colaboradores`);\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {NotificationsService} from '@tune-up/core';\nimport {AgentService} from '@tune-up/app';\nimport {GetColaboradoresService, GetProductosService, GetProyectosService, GetSprintsProductoService} from './services';\nimport html from './utfilter.component.html';\nimport './utfilter.component.css';\n\nconst proyectosCache = [];\nconst sprintsCache = [];\nconst agentesCache = [];\n\n@Component({\n  selector: 'tn-ut-filter',\n  template: html,\n  providers: [\n    GetColaboradoresService,\n    GetProductosService,\n    GetProyectosService,\n    GetSprintsProductoService,\n  ],\n})\nexport class UTFilterComponent {\n  @Input() filterUts;\n  @Input() filtro;\n\n  noProductoSelected = true;\n  idUT = '';\n  constructor(\n    getColaboradoresService : GetColaboradoresService,\n    getProductosService : GetProductosService,\n    getProyectosService : GetProyectosService,\n    getSprintsProductoService : GetSprintsProductoService,\n    agentService : AgentService,\n    notificationsService: NotificationsService,\n    router : Router\n  ) {\n    this._getColaboradoresService = getColaboradoresService;\n    this._getProductosService = getProductosService;\n    this._getProyectosService = getProyectosService;\n    this._getSprintsService = getSprintsProductoService;\n    this._agentService = agentService;\n    this._notificationService = notificationsService;\n    this._router = router;\n    this.agentes = [];\n    this.productos = [];\n    this.proyectos = [];\n    this.sprints = [];\n  }\n\n  ngOnInit() {\n    this._getProductos();\n    this._getColaboradoresSitio(this._agentService.getAgentId());\n    this._seleccionarValoresPorDefecto();\n  }\n\n  _getProductos() {\n    this._getProductosSubscription = this._getProductosService.get().subscribe(\n      (data) => {\n        this.productos = this._parseProductos(data);\n      },\n      (error) =>\n        this._notificationService.error(\n          'No se han podido obtener los productos',\n          error\n        )\n    );\n  }\n\n  _getColaboradoresSitio(idAgente) {\n    if (!agentesCache['ALL']) {\n    this._getColaboradoresSubscription =\n      this._getColaboradoresService.get(idAgente).subscribe(\n        (data) => {\n          agentesCache['ALL'] = this._parseAgentes(data);\n          this.agentes = agentesCache['ALL'];\n          this.filtro.IdAgente = 'ALL';\n        },\n        (error) =>\n          this._notificationService.error(\n            'No se han podido obtener los colaboradores del agente',\n          error\n        ));\n    } else {\n      return agentesCache['ALL'];\n    }\n  }\n\n  _parseAgentes(agentes) {\n    let agentesMap = agentes.map((ag) => {\n        return {label: `${ag.Nombre}`, value: ag.Id};\n      }\n    );\n    agentesMap.push({label: 'ALL', value: 'ALL'});\n    return agentesMap;\n  }\n\n  _getDatosProducto(idProducto) {\n    this.proyectos = this._getProyectos(idProducto);\n    this.sprints = this._getSprints(idProducto);\n    this._seleccionarValoresPorDefecto();\n  }\n  _parseProductos(productos) {\n    let productosMap = productos.map((prod) => {\n      return {label: `${prod.Nombre}`, value: prod.IdProducto};\n    });\n    productosMap.push({label: 'ALL', value: 'ALL'});\n    return productosMap;\n  }\n\n  _getProyectos(idProducto) {\n    if (!proyectosCache[idProducto]) {\n      this._getProyectoSubscription =\n      this._getProyectosService.get(idProducto).subscribe(\n        (data) => {\n          proyectosCache[idProducto] = this._parseProyectos(data);\n          this.proyectos = proyectosCache[idProducto];\n          this.filtro.IdProyecto = 'ALL';\n        },\n        (error) =>\n          this._notificationService.error(\n            'No se han podido obtener los proyectos del producto',\n          error\n        ));\n    }\n    return proyectosCache[idProducto];\n  }\n\n  _parseProyectos(proyectos) {\n    let proyectosMap = proyectos.map((pr) => {\n        return {label: `${pr.Nombre}`, value: pr.IdProyecto};\n      });\n    proyectosMap.push({label: 'ALL', value: 'ALL'});\n    proyectosMap.push({label: '<Sin Proyecto>', value: 0});\n    return proyectosMap;\n  }\n\n  _getSprints(idProducto) {\n    if (!sprintsCache[idProducto]) {\n      this._getSprintsSubscription =\n       this._getSprintsService.get(idProducto).subscribe(\n        (data) => {\n          sprintsCache[idProducto] = this._parseSprints(data);\n          this.sprints = sprintsCache[idProducto];\n          this.filtro.IdVersion = 'ALL';\n        },\n        (error) => {\n          this._notificationService.error(\n            'No se han podido obtener los Sprints del producto',\n            error\n          );\n        }\n      );\n    }\n    return sprintsCache[idProducto];\n  }\n\n  _parseSprints(sprints) {\n    let sprintsMap = sprints.map((sprint) => {\n      if (sprint.IdVersion == -1) {\n        return {label: 'Backlog', value: 0}; // TODO: Refactor backend service.\n      } else {\n        return {label: sprint.Nombre, value: sprint.IdVersion};\n      }\n    });\n    sprintsMap.push({label: 'ALL', value: 'ALL'});\n    return sprintsMap;\n  }\n\n  _seleccionarValoresPorDefecto() {\n    this.filtro.IdAgente = 'ALL';\n    this.filtro.IdProyecto = 'ALL';\n    this.filtro.IdVersion = 'ALL';\n  }\n\n  onProductChanged(idNuevoProducto) {\n    if (idNuevoProducto != 'ALL') {\n      this.noProductoSelected = false;\n      this._getDatosProducto(idNuevoProducto);\n    } else {\n      this.noProductoSelected = true;\n    }\n    this._seleccionarValoresPorDefecto();\n    this.filterUts();\n  }\n\n  onFilterChange() {\n    this.filterUts();\n  }\n\n  isIrAEmpty() {\n    return this.idUT === null || this.IdUT <= 0;\n  }\n\n  irAUT() {\n    this._router.navigateByUrl(`/uts/${this.IdUT}`);\n  }\n\n  ngOnDestroy() {\n    this._getColaboradoresSubscription &&\n      !this._getColaboradoresSubscription.closed &&\n      this._getColaboradoresSubscription.unsubscribe();\n\n    this._getProductosSubscription &&\n      !this._getProductosSubscription.closed &&\n      this._getProductosSubscription.unsubscribe();\n\n    this._getProyectoSubscription &&\n      !this._getProyectoSubscription.closed &&\n      this._getProyectoSubscription.unsubscribe();\n\n    this._getSprintsSubscription &&\n      !this._getSprintsSubscription.closed &&\n      this._getSprintsSubscription.unsubscribe();\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {HomeRoutingModule} from './home.routing';\nimport {HomeComponent} from './home.component';\nimport {TuneUpCoreModule} from '@tune-up/core';\nimport {KanbanResumeComponent, UtListComponent, UTFilterComponent} from './components';\n\n\n@NgModule({\n  imports: [TuneUpCoreModule, HomeRoutingModule],\n  declarations: [\n    HomeComponent,\n    KanbanResumeComponent,\n    UtListComponent,\n    UTFilterComponent,\n  ],\n})\nexport class HomeModule {}\n"],"names":["FilterService","Injectable","uts","filtro","filter","ut","isActivity","IdActividad","isAgente","IdAgente","isProducto","IdProducto","isVersion","IdVersion","isProyecto","IdProyecto","UtListService","http","_http","_url","idActividad","idAgente","idProducto","idVersion","idProyecto","this","get","HttpClient","AgentPicService","idSitio","HomeComponent","Component","filterService","utListService","notificationService","allUts","utsToShow","globalFilter","filterUts","_this","_filterService","_utListService","_notificationsService","_getUts","_getUtsSubscription","subscribe","data","error","_this2","closed","unsubscribe","NotificationsService","HomeRoutingModule","NgModule","RouterModule","forChild","path","component","KanbanActivitiesService","KanbanResumeComponent","Input","activitiesService","notificationsService","kanbanActivities","selectedActivity","undefined","_activitiesService","_getKanbanActivities","_getActivitiesSubscription","idActivity","utTypesIcons","workflowIcons","agentPics","UtListComponent","agentPicService","agentService","getAgentPic","_agentService","getSiteId","_agentPicService","URL","createObjectURL","getUtTypeIcon","IdTipoUT","getStateIcon","IdTipoSeguimiento","getUtLink","IdUT","AgentService","GetProductosService","GetProyectosService","GetSprintsProductoService","GetColaboradoresService","proyectosCache","sprintsCache","agentesCache","UTFilterComponent","getColaboradoresService","getProductosService","getProyectosService","getSprintsProductoService","router","noProductoSelected","idUT","_getColaboradoresService","_getProductosService","_getProyectosService","_getSprintsService","_notificationService","_router","agentes","productos","proyectos","sprints","_getProductos","_getColaboradoresSitio","getAgentId","_seleccionarValoresPorDefecto","_getProductosSubscription","_parseProductos","_getColaboradoresSubscription","_parseAgentes","agentesMap","map","ag","label","Nombre","value","Id","push","_getProyectos","_getSprints","productosMap","prod","_getProyectoSubscription","_this3","_parseProyectos","proyectosMap","pr","_getSprintsSubscription","_this4","_parseSprints","sprintsMap","sprint","idNuevoProducto","_getDatosProducto","navigateByUrl","Router","HomeModule","TuneUpCoreModule"],"mappings":"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"}