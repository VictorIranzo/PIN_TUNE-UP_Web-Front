{"version":3,"file":"tune-up.login.umd.js","sources":["../src/config/validations.js","../src/config/config.js","../src/services/login.service.js","../src/services/sites.service.js","../src/login.component.js","../src/login.routing.js","../src/components/siteselector/siteselector.component.js","../src/login.module.js"],"sourcesContent":["export const validations = {\r\n  login: {\r\n    email: [\r\n      {\r\n        isEmail: {\r\n          message: 'Debe ser un email v치lido',\r\n        },\r\n      },\r\n      {\r\n        required: {\r\n          message: 'El email es requerido',\r\n        },\r\n      },\r\n    ],\r\n    password: [\r\n      {\r\n        required: {\r\n          message: 'La contrase침a es requerida',\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n","import {configService} from '@tune-up/core';\r\nimport {validations} from './validations';\r\n\r\nconfigService.addValidations(validations);\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class LoginService {\r\n  constructor(http: HttpClient) {\r\n    this._http = http;\r\n    this._url = 'Login2';\r\n  }\r\n  login(model) {\r\n    return this._http.post(this._url, model);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class SitesService {\r\n  constructor(http: HttpClient) {\r\n    this._http = http;\r\n    this._url = 'Sitios';\r\n  }\r\n  get(email) {\r\n    return this._http.get(`${this._url}\\\\${email}`);\r\n  }\r\n}\r\n","import {Router, ActivatedRoute} from '@angular/router';\nimport {Component, ViewChild} from '@angular/core';\nimport {AuthService, AgentService, AboutService} from '@tune-up/app';\nimport {NotificationsService} from '@tune-up/core';\nimport {LoginService, SitesService} from './services';\nimport html from './login.component.html';\nimport './login.component.css';\n\n@Component({\n  selector: 'tn-login',\n  template: html,\n  providers: [LoginService, SitesService],\n})\nexport class LoginComponent {\n  model = {\n    email: undefined,\n    password: undefined,\n    idsitio: undefined,\n  };\n  sites = [];\n  loginInProgress = false;\n  _returnUrl = '/home';\n  @ViewChild('emailCtrl') emailCtrl;\n  constructor(\n    route: ActivatedRoute,\n    router: Router,\n    loginService: LoginService,\n    sitesService: SitesService,\n    authService: AuthService,\n    agentService: AgentService,\n    aboutService: AboutService,\n    notificationsService: NotificationsService\n  ) {\n    this._route = route;\n    this._router = router;\n    this._loginService = loginService;\n    this._sitesService = sitesService;\n    this._authService = authService;\n    this._aboutService = aboutService;\n    this._agentService = agentService;\n    this._notificationsService = notificationsService;\n  }\n  ngOnInit() {\n    this._setDefaulReturnUrl();\n    this._checkLogedIn();\n  }\n  _setDefaulReturnUrl() {\n    const paramsReturnUrl = this._route.snapshot.queryParams.returnUrl;\n    this._returnUrl =\n      !paramsReturnUrl ||\n        paramsReturnUrl === '/login' ||\n        paramsReturnUrl === '/'\n        ? this._returnUrl\n        : paramsReturnUrl;\n  }\n  _checkLogedIn() {\n    if (this._authService.getToken()) {\n      this._redirect();\n    }\n  }\n  _redirect() {\n    this._router.navigateByUrl(this._returnUrl);\n  }\n  onEmailFocusLost = () => {\n    if (!this.model.email || !this.emailCtrl.valid) {\n      return;\n    }\n    this._getSitesSubscription = this._sitesService.get(this.model.email).subscribe(\n      (data) => {\n        data.length > 0 && this._parseSites(data);\n      },\n      (error) => {\n        this._notificationsService.error('No se pudieron encontrar sitios', error);\n      }\n    );\n  };\n\n  _parseSites(sites) {\n    this.sites = sites.map((site) => {\n      return {label: site.Nombre, value: site.Id};\n    });\n    this.model.idsitio = sites[0] && sites[0].Id;\n  }\n  login = () => {\n    if (this.model.email && this.model.password && this.model.idsitio) {\n      this.loginInProgress = true;\n      this._loginSubscription = this._loginService.login(this.model).subscribe(\n        (data) => {\n          if (data.Exito != false) { // TODO: This should be done by the interceptor.\n          this.loginInProgress = false;\n          let {Token, Agente, Configuracion} = data;\n          Agente.IdSitio = this.model.idsitio;\n          this._authService.setToken(Token);\n          this._agentService.agent = Agente;\n          this._aboutService.about = Configuracion;\n          this._redirect();\n          } else {\n            this._handleInvalidLogin();\n          }\n        },\n        (error) => {\n          this.loginInProgress = false;\n          this._handleInvalidLogin();\n        }\n      );\n    } else {\n      this._handleInvalidLogin();\n    }\n  };\n  _handleInvalidLogin() {\n    this._notificationsService.error('Error de login',\n      'El email o la contrase침a es inv치lido'\n    );\n  }\n  setIdSitio = (idSitio) => {\n    this.model.idsitio = idSitio;\n  };\n  showSelector = () => {\n    return this.sites.length > 1;\n  };\n  ngOnDestroy() {\n    this._getSitesSubscription &&\n      !this._getSitesSubscription.closed &&\n      this._getSitesSubscription.unsubscribe();\n    this._loginSubscription &&\n      !this._loginSubscription.closed &&\n      this._loginSubscription.unsubscribe();\n  }\n}\n","import {RouterModule} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {LoginComponent} from './login.component';\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild([{path: '', component: LoginComponent}])],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginRoutingModule {}\r\n","import {Component, Input, Output, EventEmitter} from '@angular/core';\r\nimport html from './siteselector.component.html';\r\n\r\n@Component({\r\n  selector: 'tn-site-selector',\r\n  template: html,\r\n})\r\nexport class SiteSelectorComponent {\r\n  @Input() sites = [];\r\n  @Output() onSiteSelected = new EventEmitter();\r\n  selectSite = (event) => {\r\n    this.onSiteSelected.emit(event.value);\r\n  };\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {LoginRoutingModule} from './login.routing';\r\nimport {LoginComponent} from './login.component';\r\nimport {SiteSelectorComponent} from './components';\r\nimport {TuneUpCoreModule} from '@tune-up/core';\r\n\r\n@NgModule({\r\n  imports: [TuneUpCoreModule, LoginRoutingModule],\r\n  declarations: [LoginComponent, SiteSelectorComponent],\r\n})\r\nexport class LoginModule {}\r\n"],"names":["validations","configService","addValidations","LoginService","Injectable","http","_http","_url","model","this","post","HttpClient","SitesService","email","get","LoginComponent","Component","ViewChild","route","router","loginService","sitesService","authService","agentService","aboutService","notificationsService","undefined","sites","loginInProgress","_returnUrl","onEmailFocusLost","_this","emailCtrl","valid","_getSitesSubscription","_sitesService","subscribe","data","length","_parseSites","error","_notificationsService","login","password","idsitio","_loginSubscription","_loginService","Exito","Token","Agente","Configuracion","IdSitio","_authService","setToken","_agentService","agent","_aboutService","about","_redirect","_handleInvalidLogin","setIdSitio","idSitio","showSelector","_route","_router","_setDefaulReturnUrl","_checkLogedIn","paramsReturnUrl","snapshot","queryParams","returnUrl","getToken","navigateByUrl","map","site","label","Nombre","value","Id","closed","unsubscribe","ActivatedRoute","Router","AuthService","AgentService","AboutService","NotificationsService","LoginRoutingModule","NgModule","RouterModule","forChild","path","component","SiteSelectorComponent","Input","Output","selectSite","event","onSiteSelected","emit","EventEmitter","LoginModule","TuneUpCoreModule"],"mappings":"61CAAO,IAAMA,mCAKM,gDAKA,wDAOA,kCCdnBC,gBAAcC,eAAeF,u6CCChBG,KADZC,mDAEaC,6BACLC,MAAQD,OACRE,KAAO,kEAERC,UACGC,KAAKH,MAAMI,KAAKD,KAAKF,KAAMC,uEALlBG,cADPR,WCAAS,KADZR,mDAEaC,6BACLC,MAAQD,OACRE,KAAO,iEAEVM,UACKJ,KAAKH,MAAMQ,IAAOL,KAAKF,UAASM,uEALvBF,cADPC,kjCCSAG,KALZC,sBACW,2vDAEEb,EAAcS,OAWzBK,YAAU,qDAETC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,0CAjBFjB,kBACSkB,gBACGA,eACDA,QAEXC,cACAC,iBAAkB,OAClBC,WAAa,sDA0CbC,iBAAmB,WACZC,EAAKvB,MAAMK,OAAUkB,EAAKC,UAAUC,UAGpCC,sBAAwBH,EAAKI,cAAcrB,IAAIiB,EAAKvB,MAAMK,OAAOuB,UACpE,SAACC,KACMC,OAAS,GAAKP,EAAKQ,YAAYF,IAEtC,SAACG,KACMC,sBAAsBD,MAAM,kCAAmCA,YAW1EE,MAAQ,WACFX,EAAKvB,MAAMK,OAASkB,EAAKvB,MAAMmC,UAAYZ,EAAKvB,MAAMoC,WACnDhB,iBAAkB,IAClBiB,mBAAqBd,EAAKe,cAAcJ,MAAMX,EAAKvB,OAAO4B,UAC7D,SAACC,MACmB,GAAdA,EAAKU,MAAgB,GACpBnB,iBAAkB,MAClBoB,EAAgCX,EAAhCW,MAAOC,EAAyBZ,EAAzBY,OAAQC,EAAiBb,EAAjBa,gBACbC,QAAUpB,EAAKvB,MAAMoC,UACvBQ,aAAaC,SAASL,KACtBM,cAAcC,MAAQN,IACtBO,cAAcC,MAAQP,IACtBQ,mBAEEC,uBAGT,SAACnB,KACMZ,iBAAkB,IAClB+B,2BAIJA,4BAQTC,WAAa,SAACC,KACPrD,MAAMoC,QAAUiB,QAEvBC,aAAe,kBACN/B,EAAKJ,MAAMW,OAAS,QArFtByB,OAAS7C,OACT8C,QAAU7C,OACV2B,cAAgB1B,OAChBe,cAAgBd,OAChB+B,aAAe9B,OACfkC,cAAgBhC,OAChB8B,cAAgB/B,OAChBkB,sBAAwBhB,0EAGxBwC,2BACAC,sFAGCC,EAAkB1D,KAAKsD,OAAOK,SAASC,YAAYC,eACpDzC,WACFsC,GACqB,WAApBA,GACoB,MAApBA,EAEEA,EADA1D,KAAKoB,iEAIPpB,KAAK2C,aAAamB,iBACfb,+DAIFM,QAAQQ,cAAc/D,KAAKoB,4DAgBtBF,QACLA,MAAQA,EAAM8C,IAAI,SAACC,UACdC,MAAOD,EAAKE,OAAQC,MAAOH,EAAKI,WAErCtE,MAAMoC,QAAUjB,EAAM,IAAMA,EAAM,GAAGmD,0EA6BrCrC,sBAAsBD,MAAM,iBAC/B,+FAUGN,wBACFzB,KAAKyB,sBAAsB6C,QAC5BtE,KAAKyB,sBAAsB8C,mBACxBnC,qBACFpC,KAAKoC,mBAAmBkC,QACzBtE,KAAKoC,mBAAmBmC,+jBAxGJhD,mEAEfiD,iBACCC,SACM/E,EACAS,EACDuE,cACCC,eACAC,eACQC,wBAlBbvE,6BCLAwE,KAJZC,qBACWC,eAAaC,WAAWC,KAAM,GAAIC,UAAW7E,eAC7C0E,mFCCCI,KAJZ7E,sBACW,kIAIT8E,YACAC,sLACDC,WAAa,SAACC,KACPC,eAAeC,KAAKF,EAAMpB,qPAFN,IAAIuB,4BCCpBC,KAJZb,qBACWc,mBAAkBf,iBACbxE,EAAgB8E"}