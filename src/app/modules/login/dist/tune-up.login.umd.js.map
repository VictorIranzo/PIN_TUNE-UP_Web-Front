{"version":3,"file":"tune-up.login.umd.js","sources":["../src/config/validations.js","../src/config/config.js","../src/services/login.service.js","../src/services/sites.service.js","../src/login.component.js","../src/login.routing.js","../src/components/siteselector/siteselector.component.js","../src/login.module.js"],"sourcesContent":["export const validations = {\r\n  login: {\r\n    email: [\r\n      {\r\n        isEmail: {\r\n          message: 'Debe ser un email válido',\r\n        },\r\n      },\r\n      {\r\n        required: {\r\n          message: 'El email es requerido',\r\n        },\r\n      },\r\n    ],\r\n    password: [\r\n      {\r\n        required: {\r\n          message: 'La contraseña es requerida',\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n","import {configService} from '@tune-up/core';\r\nimport {validations} from './validations';\r\n\r\nconfigService.addValidations(validations);\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class LoginService {\r\n  constructor(http: HttpClient) {\r\n    this._http = http;\r\n    this._url = 'Login2';\r\n  }\r\n  login(model) {\r\n    return this._http.post(this._url, model);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class SitesService {\r\n  constructor(http: HttpClient) {\r\n    this._http = http;\r\n    this._url = 'Sitios';\r\n  }\r\n  get(email) {\r\n    return this._http.get(`${this._url}\\\\${email}`);\r\n  }\r\n}\r\n","import {Router, ActivatedRoute} from '@angular/router';\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {AuthService, AgentService, AboutService} from '@tune-up/app';\r\nimport {NotificationsService} from '@tune-up/core';\r\nimport {LoginService, SitesService} from './services';\r\nimport html from './login.component.html';\r\nimport './login.component.css';\r\n\r\n@Component({\r\n  selector: 'tn-login',\r\n  template: html,\r\n  providers: [LoginService, SitesService],\r\n})\r\nexport class LoginComponent {\r\n  model = {\r\n    email: undefined,\r\n    password: undefined,\r\n    idsitio: undefined,\r\n  };\r\n  sites = [];\r\n  _returnUrl = '/home';\r\n  @ViewChild('emailCtrl') emailCtrl;\r\n  constructor(\r\n    route: ActivatedRoute,\r\n    router: Router,\r\n    loginService: LoginService,\r\n    sitesService: SitesService,\r\n    authService: AuthService,\r\n    agentService: AgentService,\r\n    aboutService: AboutService,\r\n    notificationsService: NotificationsService\r\n  ) {\r\n    this._route = route;\r\n    this._router = router;\r\n    this._loginService = loginService;\r\n    this._sitesService = sitesService;\r\n    this._authService = authService;\r\n    this._aboutService = aboutService;\r\n    this._agentService = agentService;\r\n    this._notificationsService = notificationsService;\r\n  }\r\n  ngOnInit() {\r\n    this._setDefaulReturnUrl();\r\n    this._checkLogedIn();\r\n  }\r\n  _setDefaulReturnUrl() {\r\n    const paramsReturnUrl = this._route.snapshot.queryParams.returnUrl;\r\n    this._returnUrl =\r\n      !paramsReturnUrl ||\r\n        paramsReturnUrl === '/login' ||\r\n        paramsReturnUrl === '/'\r\n        ? this._returnUrl\r\n        : paramsReturnUrl;\r\n  }\r\n  _checkLogedIn() {\r\n    if (this._authService.getToken()) {\r\n      this._redirect();\r\n    }\r\n  }\r\n  _redirect() {\r\n    this._router.navigateByUrl(this._returnUrl);\r\n  }\r\n  onEmailFocusLost = () => {\r\n    if (!this.model.email || !this.emailCtrl.valid) {\r\n      return;\r\n    }\r\n    this._getSitesSubscription = this._sitesService.get(this.model.email).subscribe(\r\n      (data) => {\r\n        this._handleNoSites(data);\r\n        data.length > 0 && this._parseSites(data);\r\n      },\r\n      (error) => {\r\n        this._notificationsService.error('No se pudieron encontrar sitios', error);\r\n      }\r\n    );\r\n  };\r\n  _handleNoSites(sites) {\r\n    sites.length === 0 &&\r\n      this._notificationsService.error(\r\n        'No hay sitios disponibles',\r\n        'No existen sitios asociados con este email.'\r\n      );\r\n  }\r\n  _parseSites(sites) {\r\n    this.sites = sites.map((site) => {\r\n      return {label: `${site.Id}: ${site.Nombre} `, value: site.Id};\r\n    });\r\n    this.model.idsitio = sites[0] && sites[0].Id;\r\n  }\r\n  login = () => {\r\n    this._loginSubscription = this._loginService.login(this.model).subscribe(\r\n      (data) => {\r\n        let {Token, Agente, Configuracion} = data;\r\n        Agente.IdSitio = this.model.idsitio;\r\n        this._authService.setToken(Token);\r\n        this._agentService.agent = Agente;\r\n        this._aboutService.about = Configuracion;\r\n        this._redirect();\r\n      },\r\n      (error) => {\r\n        this._notificationsService.error('Error de login', error);\r\n      }\r\n    );\r\n  };\r\n  setIdSitio = (idSitio) => {\r\n    this.model.idsitio = idSitio;\r\n  };\r\n  showSelector = () => {\r\n    return this.sites.length > 1;\r\n  };\r\n  ngOnDestroy() {\r\n    this._getSitesSubscription &&\r\n      !this._getSitesSubscription.closed &&\r\n      this._getSitesSubscription.unsubscribe();\r\n    this._loginSubscription &&\r\n      !this._loginSubscription.closed &&\r\n      this._loginSubscription.unsubscribe();\r\n  }\r\n}\r\n","import {RouterModule} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {LoginComponent} from './login.component';\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild([{path: '', component: LoginComponent}])],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginRoutingModule {}\r\n","import {Component, Input, Output, EventEmitter} from '@angular/core';\r\nimport html from './siteselector.component.html';\r\n\r\n@Component({\r\n  selector: 'tn-site-selector',\r\n  template: html,\r\n})\r\nexport class SiteSelectorComponent {\r\n  @Input() sites = [];\r\n  @Output() onSiteSelected = new EventEmitter();\r\n  selectSite = (event) => {\r\n    this.onSiteSelected.emit(event.value);\r\n  };\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {LoginRoutingModule} from './login.routing';\r\nimport {LoginComponent} from './login.component';\r\nimport {SiteSelectorComponent} from './components';\r\nimport {TuneUpCoreModule} from '@tune-up/core';\r\n\r\n@NgModule({\r\n  imports: [TuneUpCoreModule, LoginRoutingModule],\r\n  declarations: [LoginComponent, SiteSelectorComponent],\r\n})\r\nexport class LoginModule {}\r\n"],"names":["validations","configService","addValidations","LoginService","Injectable","http","_http","_url","model","this","post","HttpClient","SitesService","email","get","LoginComponent","Component","ViewChild","route","router","loginService","sitesService","authService","agentService","aboutService","notificationsService","undefined","sites","_returnUrl","onEmailFocusLost","_this","emailCtrl","valid","_getSitesSubscription","_sitesService","subscribe","data","_handleNoSites","length","_parseSites","error","_notificationsService","login","_loginSubscription","_loginService","Token","Agente","Configuracion","IdSitio","idsitio","_authService","setToken","_agentService","agent","_aboutService","about","_redirect","setIdSitio","idSitio","showSelector","_route","_router","_setDefaulReturnUrl","_checkLogedIn","paramsReturnUrl","snapshot","queryParams","returnUrl","getToken","navigateByUrl","map","site","label","Id","Nombre","value","closed","unsubscribe","ActivatedRoute","Router","AuthService","AgentService","AboutService","NotificationsService","LoginRoutingModule","NgModule","RouterModule","forChild","path","component","SiteSelectorComponent","Input","Output","selectSite","event","onSiteSelected","emit","EventEmitter","LoginModule","TuneUpCoreModule"],"mappings":"61CAAO,IAAMA,mCAKM,gDAKA,wDAOA,kCCdnBC,gBAAcC,eAAeF,u6CCChBG,KADZC,mDAEaC,6BACLC,MAAQD,OACRE,KAAO,kEAERC,UACGC,KAAKH,MAAMI,KAAKD,KAAKF,KAAMC,uEALlBG,cADPR,WCAAS,KADZR,mDAEaC,6BACLC,MAAQD,OACRE,KAAO,iEAEVM,UACKJ,KAAKH,MAAMQ,IAAOL,KAAKF,UAASM,uEALvBF,cADPC,4gCCSAG,KALZC,sBACW,wgDAEEb,EAAcS,OAUzBK,YAAU,qDAETC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,0CAhBFjB,kBACSkB,gBACGA,eACDA,QAEXC,cACAC,WAAa,sDA0CbC,iBAAmB,WACZC,EAAKtB,MAAMK,OAAUiB,EAAKC,UAAUC,UAGpCC,sBAAwBH,EAAKI,cAAcpB,IAAIgB,EAAKtB,MAAMK,OAAOsB,UACpE,SAACC,KACMC,eAAeD,KACfE,OAAS,GAAKR,EAAKS,YAAYH,IAEtC,SAACI,KACMC,sBAAsBD,MAAM,kCAAmCA,YAiB1EE,MAAQ,aACDC,mBAAqBb,EAAKc,cAAcF,MAAMZ,EAAKtB,OAAO2B,UAC7D,SAACC,OACMS,EAAgCT,EAAhCS,MAAOC,EAAyBV,EAAzBU,OAAQC,EAAiBX,EAAjBW,gBACbC,QAAUlB,EAAKtB,MAAMyC,UACvBC,aAAaC,SAASN,KACtBO,cAAcC,MAAQP,IACtBQ,cAAcC,MAAQR,IACtBS,aAEP,SAAChB,KACMC,sBAAsBD,MAAM,iBAAkBA,WAIzDiB,WAAa,SAACC,KACPlD,MAAMyC,QAAUS,QAEvBC,aAAe,kBACN7B,EAAKH,MAAMW,OAAS,QA5EtBsB,OAAS1C,OACT2C,QAAU1C,OACVyB,cAAgBxB,OAChBc,cAAgBb,OAChB6B,aAAe5B,OACfgC,cAAgB9B,OAChB4B,cAAgB7B,OAChBkB,sBAAwBhB,0EAGxBqC,2BACAC,sFAGCC,EAAkBvD,KAAKmD,OAAOK,SAASC,YAAYC,eACpDvC,WACFoC,GACqB,WAApBA,GACoB,MAApBA,EAEEA,EADAvD,KAAKmB,iEAIPnB,KAAKyC,aAAakB,iBACfZ,+DAIFK,QAAQQ,cAAc5D,KAAKmB,kEAgBnBD,GACI,MAAXW,QACJ7B,KAAKgC,sBAAsBD,MACzB,4BACA,+FAGMb,QACLA,MAAQA,EAAM2C,IAAI,SAACC,UACdC,MAAUD,EAAKE,QAAOF,EAAKG,WAAWC,MAAOJ,EAAKE,WAEvDjE,MAAMyC,QAAUtB,EAAM,IAAMA,EAAM,GAAG8C,0DAwBrCxC,wBACFxB,KAAKwB,sBAAsB2C,QAC5BnE,KAAKwB,sBAAsB4C,mBACxBlC,qBACFlC,KAAKkC,mBAAmBiC,QACzBnE,KAAKkC,mBAAmBkC,+jBA/FJ9C,mEAEf+C,iBACCC,SACM5E,EACAS,EACDoE,cACCC,eACAC,eACQC,wBAjBbpE,6BCLAqE,KAJZC,qBACWC,eAAaC,WAAWC,KAAM,GAAIC,UAAW1E,eAC7CuE,mFCCCI,KAJZ1E,sBACW,kIAIT2E,YACAC,sLACDC,WAAa,SAACC,KACPC,eAAeC,KAAKF,EAAMnB,qPAFN,IAAIsB,4BCCpBC,KAJZb,qBACWc,mBAAkBf,iBACbrE,EAAgB2E"}