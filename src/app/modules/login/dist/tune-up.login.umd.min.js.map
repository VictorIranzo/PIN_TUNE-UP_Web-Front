{"version":3,"file":"tune-up.login.umd.min.js","sources":["../src/config/validations.js","../src/config/config.js","../src/services/login.service.js","../src/services/sites.service.js","../src/login.component.js","../src/login.routing.js","../src/components/siteselector/siteselector.component.js","../src/login.module.js"],"sourcesContent":["export const validations = {\n  login: {\n    email: [\n      {\n        isEmail: {\n          message: 'Debe ser un email vÃ¡lido'\n        }\n      }\n    ]\n  }\n};\n","import {configService} from '@tune-up/core';\nimport {validations} from './validations';\n\nconfigService.addValidations(validations);\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class LoginService {\n  constructor(http: HttpClient) {\n    this._http = http;\n    this._url = 'Login2';\n  }\n  login(model) {\n    return this._http.post(this._url, model);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class SitesService {\n  constructor(http: HttpClient) {\n    this._http = http;\n    this._url = 'Sitios';\n  }\n  get(email) {\n    return this._http.get(`${this._url}\\\\${email}`);\n  }\n}\n","import {Router, ActivatedRoute} from '@angular/router';\nimport {Component} from '@angular/core';\nimport {AuthService} from '@tune-up/app';\nimport {LoginService, SitesService} from './services';\nimport html from './login.component.html';\nimport './login.component.css';\n\n@Component({\n  selector: 'tn-login',\n  template: html,\n  providers: [LoginService, SitesService]\n})\nexport class LoginComponent {\n  model = {\n    email: undefined,\n    password: undefined,\n    idsitio: undefined\n  };\n  constructor(\n    route: ActivatedRoute,\n    router: Router,\n    loginService: LoginService,\n    sitesService: SitesService,\n    authService: AuthService\n  ) {\n    this._returnUrl = '/home';\n    this.sites = [];\n    this._route = route;\n    this._router = router;\n    this._loginService = loginService;\n    this._sitesService = sitesService;\n    this._authService = authService;\n  }\n  ngOnInit() {\n    this._returnUrl =\n      this._route.snapshot.queryParams.returnUrl || this._returnUrl;\n  }\n  onEmailFocusLost = () => {\n    this._sitesService.get(this.model.email).subscribe(\n      data => {\n        this.sites = data.Resultado.map(site => {\n          return {label: `${site.Id}: ${site.Nombre} `, value: site.Id};\n        });\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  };\n  setIdSitio = idSitio => {\n    this.model.idsitio = idSitio;\n  };\n  showSelector = () => {\n    return this.sites.length > 1;\n  };\n  login = () => {\n    this._loginService.login(this.model).subscribe(\n      data => {\n        console.log(data);\n        this._authService.setToken(data.Resultado.Token);\n        this._router.navigateByUrl(this._returnUrl);\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  };\n}\n","import {RouterModule} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {LoginComponent} from './login.component';\n\n@NgModule({\n  imports: [RouterModule.forChild([{path: '', component: LoginComponent}])],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule {}\n","import {Component, Input, Output, EventEmitter} from '@angular/core';\nimport html from './siteselector.component.html';\n\n@Component({\n  selector: 'tn-site-selector',\n  template: html\n})\nexport class SiteSelectorComponent {\n  @Input() sites = [];\n  @Output() onSiteSelected = new EventEmitter();\n  selectSite = event => {\n    this.onSiteSelected.emit(event.value);\n  };\n}\n","import {NgModule} from '@angular/core';\nimport {LoginRoutingModule} from './login.routing';\nimport {LoginComponent} from './login.component';\nimport {SiteSelectorComponent} from './components';\nimport {TuneUpCoreModule} from '@tune-up/core';\n\n@NgModule({\n  imports: [TuneUpCoreModule, LoginRoutingModule],\n  declarations: [LoginComponent, SiteSelectorComponent]\n})\nexport class LoginModule {}\n"],"names":["validations","configService","addValidations","LoginService","Injectable","http","_http","_url","model","this","post","HttpClient","SitesService","email","get","LoginComponent","Component","route","router","loginService","sitesService","authService","undefined","onEmailFocusLost","_sitesService","_this","subscribe","sites","data","Resultado","map","label","site","Id","Nombre","value","log","error","setIdSitio","idsitio","idSitio","showSelector","length","login","_loginService","_authService","setToken","Token","_router","navigateByUrl","_returnUrl","_route","snapshot","queryParams","returnUrl","ActivatedRoute","Router","AuthService","LoginRoutingModule","NgModule","RouterModule","forChild","path","component","SiteSelectorComponent","Input","Output","selectSite","onSiteSelected","emit","event","EventEmitter","LoginModule","TuneUpCoreModule"],"mappings":"8pCAAO,IAAMA,mCAKM,gCCFnBC,gBAAcC,eAAeF,u6CCChBG,KADZC,mDAEaC,6BACLC,MAAQD,OACRE,KAAO,kEAERC,UACGC,KAAKH,MAAMI,KAAKD,KAAKF,KAAMC,uEALlBG,cADPR,WCAAS,KADZR,mDAEaC,6BACLC,MAAQD,OACRE,KAAO,iEAEVM,UACKJ,KAAKH,MAAMQ,IAAOL,KAAKF,UAASM,uEALvBF,cADPC,gUCQAG,KALZC,sBACW,2nBAEEb,EAAcS,2CASxBK,EACAC,EACAC,EACAC,EACAC,0CAVFb,kBACSc,gBACGA,eACDA,QAqBXC,iBAAmB,aACZC,cAAcV,IAAIW,EAAKjB,MAAMK,OAAOa,UACvC,cACOC,MAAQC,EAAKC,UAAUC,IAAI,mBACtBC,MAAUC,EAAKC,QAAOD,EAAKE,WAAWC,MAAOH,EAAKC,OAG9D,oBACUG,IAAIC,WAIlBC,WAAa,cACN9B,MAAM+B,QAAUC,QAEvBC,aAAe,kBACNhB,EAAKE,MAAMe,OAAS,QAE7BC,MAAQ,aACDC,cAAcD,MAAMlB,EAAKjB,OAAOkB,UACnC,oBACUU,IAAIR,KACPiB,aAAaC,SAASlB,EAAKC,UAAUkB,SACrCC,QAAQC,cAAcxB,EAAKyB,aAElC,oBACUd,IAAIC,WAtCXa,WAAa,aACbvB,cACAwB,OAASlC,OACT+B,QAAU9B,OACV0B,cAAgBzB,OAChBK,cAAgBJ,OAChByB,aAAexB,0EAGf6B,WACHzC,KAAK0C,OAAOC,SAASC,YAAYC,WAAa7C,KAAKyC,iFAhB9CK,iBACCC,SACMrD,EACAS,EACD6C,eAXJ1C,6BCJA2C,KAJZC,qBACWC,eAAaC,WAAWC,KAAM,GAAIC,UAAWhD,eAC7C6C,mFCCCI,KAJZhD,sBACW,gIAITiD,YACAC,kLACDC,WAAa,cACNC,eAAeC,KAAKC,EAAMnC,iPAFN,IAAIoC,4BCCpBC,KAJZb,qBACWc,mBAAkBf,iBACb3C,EAAgBiD"}