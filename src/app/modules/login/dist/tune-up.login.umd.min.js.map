{"version":3,"file":"tune-up.login.umd.min.js","sources":["../src/config/validations.js","../src/config/config.js","../src/services/login.service.js","../src/services/sites.service.js","../src/login.component.js","../src/login.routing.js","../src/components/siteselector/siteselector.component.js","../src/login.module.js"],"sourcesContent":["export const validations = {\r\n  login: {\r\n    email: [\r\n      {\r\n        isEmail: {\r\n          message: 'Debe ser un email válido'\r\n        }\r\n      },\r\n      {\r\n        required: {\r\n          message: 'El email es requerido'\r\n        }\r\n      }\r\n    ],\r\n    password: [\r\n      {\r\n        required: {\r\n          message: 'La contraseña es requerida'\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n","import {configService} from '@tune-up/core';\r\nimport {validations} from './validations';\r\n\r\nconfigService.addValidations(validations);\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class LoginService {\r\n  constructor(http: HttpClient) {\r\n    this._http = http;\r\n    this._url = 'Login2';\r\n  }\r\n  login(model) {\r\n    return this._http.post(this._url, model);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class SitesService {\r\n  constructor(http: HttpClient) {\r\n    this._http = http;\r\n    this._url = 'Sitios';\r\n  }\r\n  get(email) {\r\n    return this._http.get(`${this._url}\\\\${email}`);\r\n  }\r\n}\r\n","import {Router, ActivatedRoute} from '@angular/router';\nimport {Component, ViewChild} from '@angular/core';\nimport {AuthService, AgentService, AboutService} from '@tune-up/app';\nimport {NotificationsService} from '@tune-up/core';\nimport {LoginService, SitesService} from './services';\nimport html from './login.component.html';\nimport './login.component.css';\n\n@Component({\n  selector: 'tn-login',\n  template: html,\n  providers: [LoginService, SitesService]\n})\nexport class LoginComponent {\n  model = {\n    email: undefined,\n    password: undefined,\n    idsitio: undefined\n  };\n  @ViewChild('emailCtrl') emailCtrl;\n  constructor(\n    route: ActivatedRoute,\n    router: Router,\n    loginService: LoginService,\n    sitesService: SitesService,\n    authService: AuthService,\n    agentService: AgentService,\n    aboutService: AboutService,\n    notificationsService: NotificationsService\n  ) {\n    // TODO: change to home when implemented\n    this._returnUrl = '/example';\n    this.sites = [];\n    this._route = route;\n    this._router = router;\n    this._loginService = loginService;\n    this._sitesService = sitesService;\n    this._authService = authService;\n    this._aboutService = aboutService;\n    this._agentService = agentService;\n    this._notificationsService = notificationsService;\n  }\n  _checkLogedIn() {\n    if (this._authService.getToken()) {\n      this._redirect();\n    }\n  }\n  _redirect() {\n    this._router.navigateByUrl(this._returnUrl);\n  }\n  ngOnInit() {\n    const paramsReturnUrl = this._route.snapshot.queryParams.returnUrl;\n    this._returnUrl =\n      !paramsReturnUrl || paramsReturnUrl === '/home'\n        ? this._returnUrl\n        : paramsReturnUrl;\n\n    this._checkLogedIn();\n  }\n  onEmailFocusLost = () => {\n    this.model.email &&\n      this.emailCtrl.valid &&\n      this._sitesService.get(this.model.email).subscribe(\n        data => {\n          const {Resultado} = data;\n          // TODO: refactor when backend api is refactored\n          if (Resultado.length === 0) {\n            this._notificationsService.error(\n              'No hay sitios disponibles',\n              'No existen sitios asociados con este email.'\n            );\n          } else {\n            this._parseSites(Resultado);\n          }\n        },\n        error => {\n          this._notificationsService.error('Error', error.Message);\n        }\n      );\n  };\n  _parseSites(sites) {\n    this.sites = sites.map(site => {\n      return {label: `${site.Id}: ${site.Nombre} `, value: site.Id};\n    });\n    this.model.idsitio = sites[0] && sites[0].Id;\n  }\n  setIdSitio = idSitio => {\n    this.model.idsitio = idSitio;\n  };\n  showSelector = () => {\n    return this.sites.length > 1;\n  };\n  login = () => {\n    this._loginService.login(this.model).subscribe(\n      data => {\n        // TODO: refactor when backend api is refactored\n        if (!data.Exito) {\n          this._notificationsService.error('Error de login', data.Mensaje);\n          return;\n        }\n        let {Token, Agente, Configuracion} = data.Resultado;\n        this._authService.setToken(Token);\n        this._agentService.agent = Agente;\n        this._aboutService.about = Configuracion;\n        this._redirect();\n      },\n      error => {\n        this._notificationsService.error('Error de login', error.Message);\n      }\n    );\n  };\n}\n","import {RouterModule} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {LoginComponent} from './login.component';\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild([{path: '', component: LoginComponent}])],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule {}\r\n","import {Component, Input, Output, EventEmitter} from '@angular/core';\r\nimport html from './siteselector.component.html';\r\n\r\n@Component({\r\n  selector: 'tn-site-selector',\r\n  template: html\r\n})\r\nexport class SiteSelectorComponent {\r\n  @Input() sites = [];\r\n  @Output() onSiteSelected = new EventEmitter();\r\n  selectSite = event => {\r\n    this.onSiteSelected.emit(event.value);\r\n  };\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {LoginRoutingModule} from './login.routing';\r\nimport {LoginComponent} from './login.component';\r\nimport {SiteSelectorComponent} from './components';\r\nimport {TuneUpCoreModule} from '@tune-up/core';\r\n\r\n@NgModule({\r\n  imports: [TuneUpCoreModule, LoginRoutingModule],\r\n  declarations: [LoginComponent, SiteSelectorComponent]\r\n})\r\nexport class LoginModule {}\r\n"],"names":["validations","configService","addValidations","LoginService","Injectable","http","_http","_url","model","this","post","HttpClient","SitesService","email","get","LoginComponent","Component","ViewChild","route","router","loginService","sitesService","authService","agentService","aboutService","notificationsService","undefined","onEmailFocusLost","_this","emailCtrl","valid","_sitesService","subscribe","Resultado","data","length","_notificationsService","error","_parseSites","Message","setIdSitio","idsitio","idSitio","showSelector","sites","login","_loginService","Exito","Token","Agente","Configuracion","_authService","setToken","_agentService","agent","_aboutService","about","_redirect","Mensaje","_returnUrl","_route","_router","getToken","navigateByUrl","paramsReturnUrl","snapshot","queryParams","returnUrl","_checkLogedIn","map","label","site","Id","Nombre","value","ActivatedRoute","Router","AuthService","AgentService","AboutService","NotificationsService","LoginRoutingModule","NgModule","RouterModule","forChild","path","component","SiteSelectorComponent","Input","Output","selectSite","onSiteSelected","emit","event","EventEmitter","LoginModule","TuneUpCoreModule"],"mappings":"61CAAO,IAAMA,mCAKM,gDAKA,wDAOA,kCCdnBC,gBAAcC,eAAeF,u6CCChBG,KADZC,mDAEaC,6BACLC,MAAQD,OACRE,KAAO,kEAERC,UACGC,KAAKH,MAAMI,KAAKD,KAAKF,KAAMC,uEALlBG,cADPR,WCAAS,KADZR,mDAEaC,6BACLC,MAAQD,OACRE,KAAO,iEAEVM,UACKJ,KAAKH,MAAMQ,IAAOL,KAAKF,UAASM,uEALvBF,cADPC,4gCCSAG,KALZC,sBACW,08CAEEb,EAAcS,OAQzBK,YAAU,qDAETC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,0CAdFjB,kBACSkB,gBACGA,eACDA,iDA0CXC,iBAAmB,aACZnB,MAAMK,OACTe,EAAKC,UAAUC,OACfF,EAAKG,cAAcjB,IAAIc,EAAKpB,MAAMK,OAAOmB,UACvC,gBACSC,EAAaC,EAAbD,UAEkB,IAArBA,EAAUE,SACPC,sBAAsBC,MACzB,4BACA,iDAGGC,YAAYL,IAGrB,cACOG,sBAAsBC,MAAM,QAASA,EAAME,iBAUxDC,WAAa,cACNhC,MAAMiC,QAAUC,QAEvBC,aAAe,kBACNf,EAAKgB,MAAMT,OAAS,QAE7BU,MAAQ,aACDC,cAAcD,MAAMjB,EAAKpB,OAAOwB,UACnC,eAEOE,EAAKa,aAI2Bb,EAAKD,UAArCe,IAAAA,MAAOC,IAAAA,OAAQC,IAAAA,gBACfC,aAAaC,SAASJ,KACtBK,cAAcC,MAAQL,IACtBM,cAAcC,MAAQN,IACtBO,mBAPErB,sBAAsBC,MAAM,iBAAkBH,EAAKwB,UAS5D,cACOtB,sBAAsBC,MAAM,iBAAkBA,EAAME,iBA5ExDoB,WAAa,gBACbf,cACAgB,OAAS1C,OACT2C,QAAU1C,OACV2B,cAAgB1B,OAChBW,cAAgBV,OAChB8B,aAAe7B,OACfiC,cAAgB/B,OAChB6B,cAAgB9B,OAChBa,sBAAwBX,+EAGzBhB,KAAK0C,aAAaW,iBACfL,+DAIFI,QAAQE,cAActD,KAAKkD,4DAG1BK,EAAkBvD,KAAKmD,OAAOK,SAASC,YAAYC,eACpDR,WACFK,GAAuC,UAApBA,EAEhBA,EADAvD,KAAKkD,gBAGNS,gEAuBKxB,QACLA,MAAQA,EAAMyB,IAAI,mBACbC,MAAUC,EAAKC,QAAOD,EAAKE,WAAWC,MAAOH,EAAKC,WAEvDhE,MAAMiC,QAAUG,EAAM,IAAMA,EAAM,GAAG4B,ojBAjEpB3C,mEAEf8C,iBACCC,SACMzE,EACAS,EACDiE,cACCC,eACAC,eACQC,wBAfbjE,6BCLAkE,KAJZC,qBACWC,eAAaC,WAAWC,KAAM,GAAIC,UAAWvE,eAC7CoE,mFCCCI,KAJZvE,sBACW,kIAITwE,YACAC,sLACDC,WAAa,cACNC,eAAeC,KAAKC,EAAMnB,qPAFN,IAAIoB,4BCCpBC,KAJZb,qBACWc,mBAAkBf,iBACblE,EAAgBwE"}